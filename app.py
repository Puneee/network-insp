{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMuVZfEmyqpmo4+epOx/GhX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Puneee/network-insp/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ztya-IZinlqi",
        "outputId": "c89b3eaf-83b0-467a-8399-19596a3babb0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset path: /kaggle/input/nsl-kdd-dataset\n",
            "/kaggle/input/nsl-kdd-dataset/NSL_KDD_Test.csv\n",
            "/kaggle/input/nsl-kdd-dataset/NSL_KDD_Train.csv\n",
            "\n",
            "Missing values:\n",
            "duration                       0\n",
            "protocol_type                  0\n",
            "service                        0\n",
            "flag                           0\n",
            "src_bytes                      0\n",
            "dst_bytes                      0\n",
            "land                           0\n",
            "wrong_fragment                 0\n",
            "urgent                         0\n",
            "hot                            0\n",
            "num_failed_logins              0\n",
            "logged_in                      0\n",
            "num_compromised                0\n",
            "root_shell                     0\n",
            "su_attempted                   0\n",
            "num_root                       0\n",
            "num_file_creations             0\n",
            "num_shells                     0\n",
            "num_access_files               0\n",
            "num_outbound_cmds              0\n",
            "is_host_login                  0\n",
            "is_guest_login                 0\n",
            "count                          0\n",
            "srv_count                      0\n",
            "serror_rate                    0\n",
            "srv_serror_rate                0\n",
            "rerror_rate                    0\n",
            "srv_rerror_rate                0\n",
            "same_srv_rate                  0\n",
            "diff_srv_rate                  0\n",
            "srv_diff_host_rate             0\n",
            "dst_host_count                 0\n",
            "dst_host_srv_count             0\n",
            "dst_host_same_srv_rate         0\n",
            "dst_host_diff_srv_rate         0\n",
            "dst_host_same_src_port_rate    0\n",
            "dst_host_srv_diff_host_rate    0\n",
            "dst_host_serror_rate           0\n",
            "dst_host_srv_serror_rate       0\n",
            "dst_host_rerror_rate           0\n",
            "dst_host_srv_rerror_rate       0\n",
            "label                          0\n",
            "dtype: int64\n",
            "\n",
            "Random Forest Results\n",
            "Accuracy: 0.7706706884315118\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Normal       0.66      0.97      0.78      9711\n",
            "      Attack       0.97      0.62      0.75     12833\n",
            "\n",
            "    accuracy                           0.77     22544\n",
            "   macro avg       0.81      0.80      0.77     22544\n",
            "weighted avg       0.83      0.77      0.77     22544\n",
            "\n",
            "[[9434  277]\n",
            " [4893 7940]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "SVM Results\n",
            "Accuracy: 0.7819375443577005\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Normal       0.67      0.98      0.79      9711\n",
            "      Attack       0.98      0.63      0.77     12833\n",
            "\n",
            "    accuracy                           0.78     22544\n",
            "   macro avg       0.82      0.81      0.78     22544\n",
            "weighted avg       0.84      0.78      0.78     22544\n",
            "\n",
            "[[9509  202]\n",
            " [4714 8119]]\n",
            "Epoch 1/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 0.8018 - val_loss: 0.3802\n",
            "Epoch 2/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.3954 - val_loss: 0.2471\n",
            "Epoch 3/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - loss: 0.4206 - val_loss: 0.1971\n",
            "Epoch 4/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.2174 - val_loss: 0.1686\n",
            "Epoch 5/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.1836 - val_loss: 0.1463\n",
            "Epoch 6/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - loss: 0.1923 - val_loss: 0.1285\n",
            "Epoch 7/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.1807 - val_loss: 0.1119\n",
            "Epoch 8/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.1300 - val_loss: 0.1038\n",
            "Epoch 9/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - loss: 0.1113 - val_loss: 0.0958\n",
            "Epoch 10/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - loss: 0.1284 - val_loss: 0.0874\n",
            "Epoch 11/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.0880 - val_loss: 0.1117\n",
            "Epoch 12/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - loss: 0.1110 - val_loss: 0.0803\n",
            "Epoch 13/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.0788 - val_loss: 0.0841\n",
            "Epoch 14/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - loss: 0.0999 - val_loss: 0.0726\n",
            "Epoch 15/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.0758 - val_loss: 0.0743\n",
            "Epoch 16/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.0761 - val_loss: 0.0744\n",
            "Epoch 17/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.0889 - val_loss: 0.0669\n",
            "Epoch 18/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - loss: 0.0704 - val_loss: 0.0779\n",
            "Epoch 19/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.0926 - val_loss: 0.0641\n",
            "Epoch 20/20\n",
            "\u001b[1m237/237\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - loss: 0.0607 - val_loss: 0.0936\n",
            "\u001b[1m705/705\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
            "Autoencoder Threshold: 3.02488644440252\n",
            "\n",
            "Autoencoder Results\n",
            "Accuracy: 0.47839779985805536\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Normal       0.45      1.00      0.62      9711\n",
            "      Attack       0.98      0.09      0.16     12833\n",
            "\n",
            "    accuracy                           0.48     22544\n",
            "   macro avg       0.71      0.54      0.39     22544\n",
            "weighted avg       0.75      0.48      0.36     22544\n",
            "\n",
            "[[ 9684    27]\n",
            " [11732  1101]]\n"
          ]
        }
      ],
      "source": [
        "#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#\n",
        "#Author: Puneetha Suryadevara\n",
        "\n",
        "#ABOUT: This is a Machine Learning System that polices Network Traffic. It uses traditional and deep learning methods, to compare the results for better probability of accuracy.\n",
        "\n",
        "#In Detail this project uses 3 models:\n",
        "\n",
        "#Random Forest\n",
        "\n",
        "#Support Vector Machine (SVM)\n",
        "\n",
        "#Autoencoder (unsupervised deep learning)\n",
        "\n",
        "#Using these models it outputs:\n",
        "\n",
        "#For each model (RF, SVM, Autoencoder), you now have:\n",
        "\n",
        "#Accuracy: how many it got right\n",
        "\n",
        "#Precision & Recall: how good it is at catching attacks\n",
        "\n",
        "#Confusion Matrix: how many true/false positives/negatives\n",
        "\n",
        "#Top features (Random Forest only)\n",
        "\n",
        "#Anomaly thresholding (Autoencoder only)\n",
        "#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#\n",
        "\n",
        "\n",
        "#Libraries being used:\n",
        "\n",
        "import kagglehub\n",
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Input, Dense\n",
        "\n",
        "# 1. Download the NSL-KDD dataset using KaggleHub\n",
        "\n",
        "dataset_name = \"cyberdeeplearning/nsl-kdd-dataset\"\n",
        "path = kagglehub.dataset_download(dataset_name)\n",
        "\n",
        "# Print the dataset path and file contents to see the number of columns\n",
        "print(\"Dataset path:\", path)\n",
        "for root, dirs, files in os.walk(path):\n",
        "    for file in files:\n",
        "        print(os.path.join(root, file))\n",
        "\n",
        "# Assign train and test file paths\n",
        "train_data_path = os.path.join(path, \"NSL_KDD_Train.csv\")\n",
        "test_data_path = os.path.join(path, \"NSL_KDD_Test.csv\")\n",
        "\n",
        "# 2. Define column names (42 total: 41 features + 1 label)\n",
        "\n",
        "column_names = [\n",
        "    \"duration\", \"protocol_type\", \"service\", \"flag\", \"src_bytes\", \"dst_bytes\", \"land\",\n",
        "    \"wrong_fragment\", \"urgent\", \"hot\", \"num_failed_logins\", \"logged_in\", \"num_compromised\",\n",
        "    \"root_shell\", \"su_attempted\", \"num_root\", \"num_file_creations\", \"num_shells\",\n",
        "    \"num_access_files\", \"num_outbound_cmds\", \"is_host_login\", \"is_guest_login\",\n",
        "    \"count\", \"srv_count\", \"serror_rate\", \"srv_serror_rate\", \"rerror_rate\",\n",
        "    \"srv_rerror_rate\", \"same_srv_rate\", \"diff_srv_rate\", \"srv_diff_host_rate\",\n",
        "    \"dst_host_count\", \"dst_host_srv_count\", \"dst_host_same_srv_rate\",\n",
        "    \"dst_host_diff_srv_rate\", \"dst_host_same_src_port_rate\",\n",
        "    \"dst_host_srv_diff_host_rate\", \"dst_host_serror_rate\",\n",
        "    \"dst_host_srv_serror_rate\", \"dst_host_rerror_rate\", \"dst_host_srv_rerror_rate\",\n",
        "    \"label\"\n",
        "]\n",
        "\n",
        "\n",
        "# 3. Load the datasets\n",
        "\n",
        "train_df = pd.read_csv(train_data_path, names=column_names)\n",
        "test_df = pd.read_csv(test_data_path, names=column_names)\n",
        "\n",
        "# Check for missing values\n",
        "print(\"\\nMissing values:\")\n",
        "print(train_df.isnull().sum())\n",
        "\n",
        "\n",
        "# 4. Encode categorical columns\n",
        "\n",
        "categorical_cols = ['protocol_type', 'service', 'flag']\n",
        "encoders = {}\n",
        "\n",
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    train_df[col] = le.fit_transform(train_df[col])\n",
        "    test_df[col] = le.transform(test_df[col])\n",
        "    encoders[col] = le\n",
        "\n",
        "# Convert label column to binary (normal=0, attack=1)\n",
        "train_df['label'] = train_df['label'].apply(lambda x: 0 if x == 'normal' else 1)\n",
        "test_df['label'] = test_df['label'].apply(lambda x: 0 if x == 'normal' else 1)\n",
        "\n",
        "# Split into X and y\n",
        "X_train = train_df.drop('label', axis=1)\n",
        "y_train = train_df['label']\n",
        "X_test = test_df.drop('label', axis=1)\n",
        "y_test = test_df['label']\n",
        "\n",
        "\n",
        "# 5. Random Forest Classifier\n",
        "\n",
        "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "rf_model.fit(X_train, y_train)\n",
        "y_pred_rf = rf_model.predict(X_test)\n",
        "\n",
        "print(\"\\nRandom Forest Results\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred_rf))\n",
        "print(classification_report(y_test, y_pred_rf, target_names=[\"Normal\", \"Attack\"]))\n",
        "print(confusion_matrix(y_test, y_pred_rf))\n",
        "\n",
        "# Plot top 10 feature importances\n",
        "importances = rf_model.feature_importances_\n",
        "indices = np.argsort(importances)[::-1]\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.title(\"Top 10 Important Features\")\n",
        "plt.bar(range(10), importances[indices[:10]], align='center')\n",
        "plt.xticks(range(10), X_train.columns[indices[:10]], rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# 6. Support Vector Machine\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "svm_model = SVC(kernel='rbf', C=1.0, gamma='scale')\n",
        "svm_model.fit(X_train_scaled, y_train)\n",
        "y_pred_svm = svm_model.predict(X_test_scaled)\n",
        "\n",
        "print(\"\\nSVM Results\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred_svm))\n",
        "print(classification_report(y_test, y_pred_svm, target_names=[\"Normal\", \"Attack\"]))\n",
        "print(confusion_matrix(y_test, y_pred_svm))\n",
        "\n",
        "\n",
        "# 7. Autoencoder Anomaly Detection\n",
        "\n",
        "X_train_ae = X_train[y_train == 0]  # Train only on normal traffic\n",
        "scaler_ae = StandardScaler()\n",
        "X_train_ae_scaled = scaler_ae.fit_transform(X_train_ae)\n",
        "X_test_scaled = scaler_ae.transform(X_test)\n",
        "\n",
        "input_dim = X_train_ae_scaled.shape[1]\n",
        "input_layer = Input(shape=(input_dim,))\n",
        "encoded = Dense(32, activation='relu')(input_layer)\n",
        "encoded = Dense(16, activation='relu')(encoded)\n",
        "decoded = Dense(32, activation='relu')(encoded)\n",
        "output_layer = Dense(input_dim, activation='linear')(decoded)\n",
        "\n",
        "autoencoder = Model(inputs=input_layer, outputs=output_layer)\n",
        "autoencoder.compile(optimizer='adam', loss='mse')\n",
        "autoencoder.fit(\n",
        "    X_train_ae_scaled, X_train_ae_scaled,\n",
        "    epochs=20,\n",
        "    batch_size=256,\n",
        "    shuffle=True,\n",
        "    validation_split=0.1,\n",
        "    verbose=1\n",
        ")\n",
        "\n",
        "# Predict and calculate reconstruction error\n",
        "reconstructions = autoencoder.predict(X_test_scaled)\n",
        "mse = np.mean(np.power(X_test_scaled - reconstructions, 2), axis=1)\n",
        "threshold = np.percentile(mse, 95)\n",
        "print(\"Autoencoder Threshold:\", threshold)\n",
        "\n",
        "y_pred_ae = (mse > threshold).astype(int)\n",
        "\n",
        "print(\"\\nAutoencoder Results\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred_ae))\n",
        "print(classification_report(y_test, y_pred_ae, target_names=[\"Normal\", \"Attack\"]))\n",
        "print(confusion_matrix(y_test, y_pred_ae))\n"
      ]
    }
  ]
}